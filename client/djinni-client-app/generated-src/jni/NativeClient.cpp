// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from client.djinni

#include "NativeClient.hpp"  // my header
#include "Marshal.hpp"
#include "NativeUser.hpp"

namespace djinni_generated {

NativeClient::NativeClient() : ::djinni::JniInterface<::client::Client, NativeClient>("com/mycompany/client/Client$CppProxy") {}

NativeClient::~NativeClient() = default;


CJNIEXPORT void JNICALL Java_com_mycompany_client_Client_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::client::Client>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_mycompany_client_Client_createWithPath(JNIEnv* jniEnv, jobject /*this*/, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::client::Client::create_with_path(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni_generated::NativeClient::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_mycompany_client_Client_00024CppProxy_native_1getUserinfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::client::Client>(nativeRef);
        auto r = ref->get_userinfo();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeUser>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_mycompany_client_Client_00024CppProxy_native_1register(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_username, jstring j_password, jstring j_deviceid)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::client::Client>(nativeRef);
        ref->register(::djinni::String::toCpp(jniEnv, j_username),
                      ::djinni::String::toCpp(jniEnv, j_password),
                      ::djinni::String::toCpp(jniEnv, j_deviceid));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_mycompany_client_Client_00024CppProxy_native_1checkAuth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_username, jstring j_auth)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::client::Client>(nativeRef);
        ref->check_auth(::djinni::String::toCpp(jniEnv, j_username),
                        ::djinni::String::toCpp(jniEnv, j_auth));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_mycompany_client_Client_00024CppProxy_native_1login(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_username, jstring j_password, jstring j_deviceid)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::client::Client>(nativeRef);
        ref->login(::djinni::String::toCpp(jniEnv, j_username),
                   ::djinni::String::toCpp(jniEnv, j_password),
                   ::djinni::String::toCpp(jniEnv, j_deviceid));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
