// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: check_auth.proto

#ifndef PROTOBUF_INCLUDED_check_5fauth_2eproto
#define PROTOBUF_INCLUDED_check_5fauth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_check_5fauth_2eproto 

namespace protobuf_check_5fauth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_check_5fauth_2eproto
namespace RegisterAndLogin {
class CheckAuthReply;
class CheckAuthReplyDefaultTypeInternal;
extern CheckAuthReplyDefaultTypeInternal _CheckAuthReply_default_instance_;
class CheckAuthRequest;
class CheckAuthRequestDefaultTypeInternal;
extern CheckAuthRequestDefaultTypeInternal _CheckAuthRequest_default_instance_;
}  // namespace RegisterAndLogin
namespace google {
namespace protobuf {
template<> ::RegisterAndLogin::CheckAuthReply* Arena::CreateMaybeMessage<::RegisterAndLogin::CheckAuthReply>(Arena*);
template<> ::RegisterAndLogin::CheckAuthRequest* Arena::CreateMaybeMessage<::RegisterAndLogin::CheckAuthRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace RegisterAndLogin {

// ===================================================================

class CheckAuthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterAndLogin.CheckAuthRequest) */ {
 public:
  CheckAuthRequest();
  virtual ~CheckAuthRequest();

  CheckAuthRequest(const CheckAuthRequest& from);

  inline CheckAuthRequest& operator=(const CheckAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckAuthRequest(CheckAuthRequest&& from) noexcept
    : CheckAuthRequest() {
    *this = ::std::move(from);
  }

  inline CheckAuthRequest& operator=(CheckAuthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAuthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAuthRequest* internal_default_instance() {
    return reinterpret_cast<const CheckAuthRequest*>(
               &_CheckAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CheckAuthRequest* other);
  friend void swap(CheckAuthRequest& a, CheckAuthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAuthRequest* New() const final {
    return CreateMaybeMessage<CheckAuthRequest>(NULL);
  }

  CheckAuthRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckAuthRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckAuthRequest& from);
  void MergeFrom(const CheckAuthRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string auth = 2;
  void clear_auth();
  static const int kAuthFieldNumber = 2;
  const ::std::string& auth() const;
  void set_auth(const ::std::string& value);
  #if LANG_CXX11
  void set_auth(::std::string&& value);
  #endif
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  ::std::string* mutable_auth();
  ::std::string* release_auth();
  void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:RegisterAndLogin.CheckAuthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_check_5fauth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckAuthReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterAndLogin.CheckAuthReply) */ {
 public:
  CheckAuthReply();
  virtual ~CheckAuthReply();

  CheckAuthReply(const CheckAuthReply& from);

  inline CheckAuthReply& operator=(const CheckAuthReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckAuthReply(CheckAuthReply&& from) noexcept
    : CheckAuthReply() {
    *this = ::std::move(from);
  }

  inline CheckAuthReply& operator=(CheckAuthReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAuthReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAuthReply* internal_default_instance() {
    return reinterpret_cast<const CheckAuthReply*>(
               &_CheckAuthReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CheckAuthReply* other);
  friend void swap(CheckAuthReply& a, CheckAuthReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAuthReply* New() const final {
    return CreateMaybeMessage<CheckAuthReply>(NULL);
  }

  CheckAuthReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckAuthReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckAuthReply& from);
  void MergeFrom(const CheckAuthReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAuthReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isValid = 3;
  void clear_isvalid();
  static const int kIsValidFieldNumber = 3;
  bool isvalid() const;
  void set_isvalid(bool value);

  // @@protoc_insertion_point(class_scope:RegisterAndLogin.CheckAuthReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isvalid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_check_5fauth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckAuthRequest

// string userName = 1;
inline void CheckAuthRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAuthRequest::username() const {
  // @@protoc_insertion_point(field_get:RegisterAndLogin.CheckAuthRequest.userName)
  return username_.GetNoArena();
}
inline void CheckAuthRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterAndLogin.CheckAuthRequest.userName)
}
#if LANG_CXX11
inline void CheckAuthRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterAndLogin.CheckAuthRequest.userName)
}
#endif
inline void CheckAuthRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterAndLogin.CheckAuthRequest.userName)
}
inline void CheckAuthRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterAndLogin.CheckAuthRequest.userName)
}
inline ::std::string* CheckAuthRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:RegisterAndLogin.CheckAuthRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:RegisterAndLogin.CheckAuthRequest.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAuthRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:RegisterAndLogin.CheckAuthRequest.userName)
}

// string auth = 2;
inline void CheckAuthRequest::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAuthRequest::auth() const {
  // @@protoc_insertion_point(field_get:RegisterAndLogin.CheckAuthRequest.auth)
  return auth_.GetNoArena();
}
inline void CheckAuthRequest::set_auth(const ::std::string& value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterAndLogin.CheckAuthRequest.auth)
}
#if LANG_CXX11
inline void CheckAuthRequest::set_auth(::std::string&& value) {
  
  auth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterAndLogin.CheckAuthRequest.auth)
}
#endif
inline void CheckAuthRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterAndLogin.CheckAuthRequest.auth)
}
inline void CheckAuthRequest::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterAndLogin.CheckAuthRequest.auth)
}
inline ::std::string* CheckAuthRequest::mutable_auth() {
  
  // @@protoc_insertion_point(field_mutable:RegisterAndLogin.CheckAuthRequest.auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAuthRequest::release_auth() {
  // @@protoc_insertion_point(field_release:RegisterAndLogin.CheckAuthRequest.auth)
  
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAuthRequest::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:RegisterAndLogin.CheckAuthRequest.auth)
}

// -------------------------------------------------------------------

// CheckAuthReply

// bool isValid = 3;
inline void CheckAuthReply::clear_isvalid() {
  isvalid_ = false;
}
inline bool CheckAuthReply::isvalid() const {
  // @@protoc_insertion_point(field_get:RegisterAndLogin.CheckAuthReply.isValid)
  return isvalid_;
}
inline void CheckAuthReply::set_isvalid(bool value) {
  
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:RegisterAndLogin.CheckAuthReply.isValid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RegisterAndLogin

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_check_5fauth_2eproto
