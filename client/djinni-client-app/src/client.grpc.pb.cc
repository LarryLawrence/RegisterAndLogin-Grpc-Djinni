// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client.proto

#include "client.pb.h"
#include "client.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace client {

static const char* Client_method_names[] = {
  "/client.Client/CheckAuth",
  "/client.Client/Login",
  "/client.Client/Register",
};

std::unique_ptr< Client::Stub> Client::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Client::Stub> stub(new Client::Stub(channel));
  return stub;
}

Client::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckAuth_(Client_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(Client_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(Client_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Client::Stub::CheckAuth(::grpc::ClientContext* context, const ::client::CheckAuthRequest& request, ::client::CheckAuthReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckAuth_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::client::CheckAuthReply>* Client::Stub::AsyncCheckAuthRaw(::grpc::ClientContext* context, const ::client::CheckAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::client::CheckAuthReply>::Create(channel_.get(), cq, rpcmethod_CheckAuth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::client::CheckAuthReply>* Client::Stub::PrepareAsyncCheckAuthRaw(::grpc::ClientContext* context, const ::client::CheckAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::client::CheckAuthReply>::Create(channel_.get(), cq, rpcmethod_CheckAuth_, context, request, false);
}

::grpc::Status Client::Stub::Login(::grpc::ClientContext* context, const ::client::LoginRequest& request, ::client::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::client::LoginReply>* Client::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::client::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::client::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::client::LoginReply>* Client::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::client::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::client::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status Client::Stub::Register(::grpc::ClientContext* context, const ::client::RegisterRequest& request, ::client::RegisterReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::client::RegisterReply>* Client::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::client::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::client::RegisterReply>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::client::RegisterReply>* Client::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::client::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::client::RegisterReply>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

Client::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Client_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Client::Service, ::client::CheckAuthRequest, ::client::CheckAuthReply>(
          std::mem_fn(&Client::Service::CheckAuth), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Client_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Client::Service, ::client::LoginRequest, ::client::LoginReply>(
          std::mem_fn(&Client::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Client_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Client::Service, ::client::RegisterRequest, ::client::RegisterReply>(
          std::mem_fn(&Client::Service::Register), this)));
}

Client::Service::~Service() {
}

::grpc::Status Client::Service::CheckAuth(::grpc::ServerContext* context, const ::client::CheckAuthRequest* request, ::client::CheckAuthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Client::Service::Login(::grpc::ServerContext* context, const ::client::LoginRequest* request, ::client::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Client::Service::Register(::grpc::ServerContext* context, const ::client::RegisterRequest* request, ::client::RegisterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace client

