// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: login.proto

#include "login.pb.h"
#include "login.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace RegisterAndLogin {

static const char* Login_method_names[] = {
  "/RegisterAndLogin.Login/Login",
};

std::unique_ptr< Login::Stub> Login::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Login::Stub> stub(new Login::Stub(channel));
  return stub;
}

Login::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(Login_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Login::Stub::Login(::grpc::ClientContext* context, const ::RegisterAndLogin::LoginRequest& request, ::RegisterAndLogin::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::RegisterAndLogin::LoginReply>* Login::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::RegisterAndLogin::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterAndLogin::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterAndLogin::LoginReply>* Login::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::RegisterAndLogin::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterAndLogin::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

Login::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Login_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Login::Service, ::RegisterAndLogin::LoginRequest, ::RegisterAndLogin::LoginReply>(
          std::mem_fn(&Login::Service::Login), this)));
}

Login::Service::~Service() {
}

::grpc::Status Login::Service::Login(::grpc::ServerContext* context, const ::RegisterAndLogin::LoginRequest* request, ::RegisterAndLogin::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RegisterAndLogin

